<?xml version="1.0" encoding="utf-8"?>		
<!--
This file is part of MonaClients.

MonaClients is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

MonaClients is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with MonaClients.  If not, see <http://www.gnu.org/licenses/>.
-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx"  minWidth="800" minHeight="600" applicationComplete="init();">
				
	<fx:Script>
		<![CDATA[
			/*
			 * Usage : http://<host>/VideoPlayer/[?options]
			 * 
			 * Options are :
			 * 
			 * - fit				    The player will be fitted to the window
			 * - url=<url>              Set the url to connect to (automatic connection)
			 * - groupname				Set automatically the group name to this value
			 * - groupid				Set automatically the group id specifier to this value
			 * - noconfig               Remove the configuration's panel
			 * - notools                Remove all the tools. It means that you need "url" and "protocol" options to connect to a stream
			 * - width=<integer>        Fixed width of the player
			 * - height=<integer>       Fixed height of the player
			 * - unbuffered             Tell to MonaServer to not bufferize the stream
			 * - unreliable             Set the videoReliable and audioReliable attributes of the NetStream to false
			 * 
			 * Example : http://127.0.0.1/VideoPlayer/?fit will open the player in fit mode
			 */
		
			import flash.events.FullScreenEvent;
			import flash.events.MouseEvent;
			import flash.events.IOErrorEvent;
			import flash.events.TimerEvent;
			import flash.filters.ColorMatrixFilter;
			import flash.geom.Matrix;
			import flash.utils.Timer;
			import mx.utils.URLUtil;
			import flash.events.AsyncErrorEvent;
			import flash.events.IOErrorEvent;
			
			private var _filter:ColorMatrixFilter; // Color filter for button tools
			
			private var _netConnection:NetConnection;
			private var _receiveNS:NetStream;
			private var _domainNPath:String; // url of the video
			private var _name:String; // name of the video
			private var _netGroup:NetGroup;
			private var _vid:Video = new Video(800, 600);
			
			// Width & Height of the video layout
			private var _width:int = 800;
			private var _height:int = 600;
			private var _fixedSize:Boolean = false;
			private var _angle:int = -1; // Rotation angle of the video (in radian, set by MobilePublisher)
			
			private var _timerStats:Timer; // Timer for showing Statistics (disabled by default)
			private const TIMER_STATS_DELAY:int = 500;
			
			private function init():void {
				consoleRTMP.text += "Initialization of the video player\n";
				
				// Add RTMP/RTMFP video player 
				_vid.opaqueBackground = 0x000000;
				_vid.smoothing = true;
				videoUI.addChild(_vid);
				
				// Generate dynamic url
				var url:String = this.loaderInfo.url;
				var domainNPath:Array = url.match(/(:\/\/.+)\//);
				if (URLUtil.getProtocol(url) != "file")
					address.text = "rtmfp" + domainNPath[1] + "/test123";
					
				// Generate netconnection for RTMP/RTMFP player
				_netConnection = new NetConnection();
				_netConnection.client = this;
				_netConnection.addEventListener(NetStatusEvent.NET_STATUS, onStatusNetConnection);
				_netConnection.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onStatusNetStream);
				_netConnection.addEventListener(IOErrorEvent.IO_ERROR, onStatusNetStream);
				
				if (loaderInfo.parameters) {
					// No configuration panel?
					if (loaderInfo.parameters.noconfig)
						containerVideo.removeChild(config);
					// No tools?
					if (loaderInfo.parameters.notools)
						containerTools.removeChild(tools);
					else {
						// To change color of tool buttons on over/out
						var matrix:Array = new Array();
						matrix = matrix.concat([0, 0, 0, 0, 0]); // red
						matrix = matrix.concat([0, 0, 0, 0, 0]); // green
						matrix = matrix.concat([0, 0, 1, 0, 0]); // blue
						matrix = matrix.concat([0, 0, 0, 0.2, 0]); // alpha
						_filter = new ColorMatrixFilter(matrix);
						btPause.addEventListener(MouseEvent.ROLL_OVER, onBtOver);
						btPause.addEventListener(MouseEvent.ROLL_OUT, onBtOut);
						btParameters.addEventListener(MouseEvent.ROLL_OVER, onBtOver);
						btParameters.addEventListener(MouseEvent.ROLL_OUT, onBtOut);
						btFullScreen.addEventListener(MouseEvent.ROLL_OVER, onBtOver);
						btFullScreen.addEventListener(MouseEvent.ROLL_OUT, onBtOut);
					}
					// Fixed width?
					if (loaderInfo.parameters.width) {
						_width = loaderInfo.parameters.width;
						_fixedSize = true;
					}
					// Fixed height
					if (loaderInfo.parameters.height) {
						_height = loaderInfo.parameters.height;
						_fixedSize = true;
					}
					// Fit video to the windows
					if (loaderInfo.parameters.fit) {
						stage.addEventListener(Event.RESIZE, onStageResized); 
						_width = _height = -1;
						_fixedSize = true;
					}
					// Finally, automatically connect to the url in parameter
					// url : host + path of the stream
					// protocol : protocol of the stream (rtmp/rtmfp)
					if (loaderInfo.parameters.url) {
						config.visible = false;						
						address.text = loaderInfo.parameters.url;
						if (loaderInfo.parameters.unbuffered)
							address.text += "?unbuffered=true";
						if (loaderInfo.parameters.groupname)
							group.text = loaderInfo.parameters.groupname;
						if (loaderInfo.parameters.groupid)
							groupspecifier.text = loaderInfo.parameters.groupid;
						onConnect();
					} else if (loaderInfo.parameters.unbuffered)
						address.text += "?unbuffered=true";
				}
				
				// FullScreen Escape event
				stage.addEventListener(FullScreenEvent.FULL_SCREEN, onEscapeFullScreen);
				
				// Update the size of the video layout
				resetVideoLayout(_width, _height);
				
				// Add close window handler to close connection
				try {
					ExternalInterface.addCallback("sendToActionScript", closeWindow);
				} catch(e:Error) {}
			}
			
			/**
			 * (Chrome fix)
			 * This function is called from Javascript when the window
			 * is closed for closing an eventual connection
			 * It is very IMPORTANT to close correctly the connection
			 */
			public function closeWindow(value:String):void {
				if (_netConnection && _netConnection.connected)
					_netConnection.close();
			}
			
			// Change color of Toolbar buttons on over/out
			private function onBtOut(e:MouseEvent):void { e.target.filters = null; }
			private function onBtOver(e:MouseEvent):void { e.target.filters = [_filter]; }
			
			// Toggle visibility of the toolbar
			private function showToolBar(event:MouseEvent):void { tools.visible = true;	}
			private function unshowToolBar(event:MouseEvent):void { tools.visible = false;	}
			
			// Rotate the video layout if needed
			private function doRotation(delta:int):void {
				if (delta > 0) {
					var matrix:Matrix = _vid.transform.matrix;
					// translation |  x  |  y  |
					// 0		   |  0  |  0  |
					// π*1/2       |  0  | -h  |
					// π           | -w  | -h  |
					// π*3/2       | -w  |  0  |
					matrix.translate((delta%4 > 1)? -_vid.width : 0,((delta+1)%4 > 1)? -_vid.height : 0);
					matrix.rotate(Math.PI*(delta/2));
					if (delta % 2)
						matrix.scale(_vid.width / _vid.height,_vid.height / _vid.width);
					_vid.transform.matrix = matrix;
				}
			}
			
			// Show MetaData informations (called by Mona)
			public function onMetaData(infoObject:Object):void { 
				consoleRTMP.text += "MetaData : \n";
				for (var key:String in infoObject) { 
					consoleRTMP.text += " - " + key + ": " + infoObject[key] + "\n"; 
				} 
				
				// Resize video
				if (!_fixedSize && infoObject["width"] && infoObject["height"])
					resetVideoLayout(infoObject["width"], infoObject["height"]);
					
				// Rotate the video layout (called by MobilePublisher)
				if (infoObject["angle"] != null) {
					var angle:int = int(infoObject["angle"]);
					var delta:int = angle;
					// Calculate the delta with last angle
					if (_angle != -1)
						delta = (angle<_angle)? angle - _angle + 4 : angle - _angle;
					_angle = angle;
					doRotation(delta);
				} else if (_angle > -1)
					_angle = -1;
			}		
			
			// If "fit" mode : resize the video when stage is resized 
			private function onStageResized(e:Event):void {
				if (stage.displayState != StageDisplayState.FULL_SCREEN)
					resetVideoLayout(_width, _height);
			}
			
			// Reset Video Layout and position
			private function resetVideoLayout(newWidth:int, newHeight:int):void {
				if (newWidth == -1) {
					newWidth = width;
					newHeight = height;
				}
				// Reset rotation before resizing
				if (_angle > 0)
					doRotation(4 - _angle);
				_vid.width = containerVideo.width = newWidth;
				_vid.height = containerVideo.height = newHeight;
				if (_angle > 0)
					doRotation(_angle); // Rotate
				
				if (tools) {
					// update tools & config position
					containerTools.y = newHeight - 32 - ((config)? config.height : 0);
					
					// Set the background of tools
					tools.graphics.clear();
					tools.graphics.beginFill(uint(0xCCCCCC), 0.6);
					tools.graphics.drawRect(0,0,newWidth, 32);
					tools.graphics.endFill();
				}
			}
			
			// Pause the video
			private function pause():void { 
				if (_receiveNS)
					_receiveNS.togglePause(); 
			}
			
			// Receive message from the publisher
			public function message2All(message:String):void {messages.text = message; }
			
			// Manage NetStream events
			private function onStatusNetStream(evt:Event):void {
				 
				if (evt is IOErrorEvent)
					 consoleRTMP.text +=  "NetStream error : " + IOErrorEvent(evt).text + "\n"; 
				else if (evt is AsyncErrorEvent)
					 consoleRTMP.text +=  "NetStream error : " + AsyncErrorEvent(evt).text + "\n"; 
				else {
					 var event:NetStatusEvent = NetStatusEvent(evt);
					 consoleRTMP.text +=  "NetStream event : " + event.info.code + "\n";
					 
					 switch (event.info.code) {
						// Only for scalability
						// see http://monasolutions.github.io/MonaServer/scalability.html#exchange-data-and-resources 
						case "NetStream.Play.Failed":
							 var error:Array = event.info.description.split(" ");
							 if (error.length > 0) {
								 var host:String = "rtmfp://" + error[error.length-1];
								 
								 _netConnection.close();
								 _netConnection.connect(host);
							 }
							 break;
						// Reset video size layout size
						case "NetStream.Video.DimensionChange":
							if (!_fixedSize)
								resetVideoLayout(_vid.videoWidth, _vid.videoHeight);
							break;
					}
				}
			}
			 
			// Manage NetConnection events
			private function onStatusNetConnection(evt:Event):void {
				
				if (evt is IOErrorEvent)
					 consoleRTMP.text +=  "NetConnection error : " + IOErrorEvent(evt).text + "\n"; 
				else if (evt is AsyncErrorEvent)
					 consoleRTMP.text +=  "NetConnection error : " + AsyncErrorEvent(evt).text + "\n"; 
				else {
					var event:NetStatusEvent = NetStatusEvent(evt);
					
					consoleRTMP.text += 'NetConnection event : ' + event.info.code + "\n";
					
					switch (event.info.code) {
						case "NetConnection.Connect.Success":
							// Classic listening
							if (group.text == "" && groupspecifier.text == "") {
								consoleRTMP.text += "Start playing stream " + _name + "\n";
								_receiveNS = new NetStream(_netConnection);
								onBufferSize();
								_receiveNS.addEventListener(NetStatusEvent.NET_STATUS, onStatusNetStream);
								_vid.attachNetStream(_receiveNS);
								_receiveNS.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onStatusNetStream);
								_receiveNS.addEventListener(IOErrorEvent.IO_ERROR, onStatusNetStream);
								_receiveNS.client = this;
								_receiveNS.play(_name);
							} else { // Netgroup listening
								
								var groupId:String = groupspecifier.text;
								if (groupspecifier.text == "") {
									var groupSpec:GroupSpecifier = new GroupSpecifier(group.text);
									groupSpec.peerToPeerDisabled = false; 
									groupSpec.serverChannelEnabled=true; 
									groupSpec.ipMulticastMemberUpdatesEnabled=true; 
									groupSpec.multicastEnabled=true; 
									groupSpec.postingEnabled=true;
									groupId = groupSpec.groupspecWithAuthorizations();
								}
								
								consoleRTMP.text += "GroupSpec created : " + groupId + "\n";
								_receiveNS = new NetStream(_netConnection, groupId);
								_receiveNS.addEventListener(NetStatusEvent.NET_STATUS, onStatusNetStream);
								_receiveNS.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onStatusNetStream);
								_receiveNS.addEventListener(IOErrorEvent.IO_ERROR, onStatusNetStream);
								//_receiveNS.inBufferSeek = false;
								_receiveNS.client = this;
								
								_netGroup = new NetGroup(_netConnection,groupId); 
								//_netGroup.receiveMode = NetGroupReceiveMode.NEAREST;
								_netGroup.addEventListener(NetStatusEvent.NET_STATUS, function(evt:NetStatusEvent):void {
									consoleRTMP.text +=  "NetGroup event : " + evt.info.code + "\n";
								});
							}
							// Faster video stream (but unreliable)
							if (loaderInfo.parameters && loaderInfo.parameters.unreliable) {
								consoleRTMP.text +=  "Unreliable stream requested\n";
								_receiveNS.videoReliable = false;
								_receiveNS.audioReliable = false;
							}
							
							break;
						case "NetStream.Connect.Success": // Group connection
							if (group.text != "" || groupspecifier.text != "") {
								_vid.attachNetStream(_receiveNS);
								_receiveNS.play(_name);
								onBufferSize();
							}
							break;
					}
				}
			}
			
			// Connect to the RTMP/RTMFP link
			private function onConnect():void {
				
				var lastSlash:int = address.text.lastIndexOf("/");
				_domainNPath=address.text.substr(0,lastSlash);
				_name=address.text.substr(lastSlash+1);
				consoleRTMP.text += "Connection to '" + _domainNPath + "' (stream name : " + _name+")\n";				
				if (_netConnection.connected)
					_netConnection.close();

				_netConnection.connect(_domainNPath);
			}
			
			// Parameters button
			private function onParameters():void {
				config.visible = !config.visible;
				if (_receiveNS) { // While no connection has been established : show the toolbar
					if (config.visible) {
						containerVideo.removeEventListener(MouseEvent.ROLL_OVER, showToolBar);
						containerVideo.removeEventListener(MouseEvent.ROLL_OUT, unshowToolBar);
					} else {
						containerVideo.addEventListener(MouseEvent.ROLL_OVER, showToolBar);
						containerVideo.addEventListener(MouseEvent.ROLL_OUT, unshowToolBar);
					}
				}
			}
			
			
			// FullScreen button
			private function onFullScreen():void {
				if (stage.displayState == StageDisplayState.FULL_SCREEN) 
					stage.displayState = StageDisplayState.NORMAL; // escape from fullscreen mode
				else
					stage.displayState = StageDisplayState.FULL_SCREEN;
			}
			
			// Called when ESCAPE is pressed and FullScreen is ON
			private function onEscapeFullScreen(event:FullScreenEvent):void {
				consoleRTMP.text += "FullScreen " + ((event.fullScreen)? "ON" : "OFF") + "\n";
				// FullScreen end
				if (!event.fullScreen) {
					if (!_fixedSize && _vid.videoWidth && _vid.videoHeight)
						resetVideoLayout(_vid.videoWidth, _vid.videoHeight);
					else
						resetVideoLayout(_width, _height);
				} else { // FullScreen start
					resetVideoLayout(width, height);
				}
			}
			
			// Enable/Disable statistics
			private function toggleStats():void {
				if (_timerStats && _timerStats.running) {
					_timerStats.stop();
					btStatistics.label = "Start";
				} else {
					btStatistics.label = "Stop";
					if (!_timerStats) {
						_timerStats = new Timer(TIMER_STATS_DELAY);
						_timerStats.addEventListener(TimerEvent.TIMER, onStatistics);
					}
						
					_timerStats.start();
				}
			}
			
			// Callback of statistics timer
			private function onStatistics(event:TimerEvent):void {
				if (_netConnection && _netConnection.connected && _receiveNS) {
					
					statBuffLength.text = _receiveNS.bufferLength.toString();
					statBytesLoaded.text = _receiveNS.bytesLoaded.toString();
					statCurrentFPS.text = _receiveNS.currentFPS.toFixed(2);
					statLiveDelay.text = _receiveNS.liveDelay.toString();
					statTime.text = _receiveNS.time.toFixed(2);
						
					statByteCount.text = _receiveNS.info.byteCount.toString();
					statDroppedFrames.text = _receiveNS.info.droppedFrames.toString();
					statMaxBytesSec.text = (_receiveNS.info.maxBytesPerSecond/1000).toFixed(2);
					statPlaybackBytesSec.text = (_receiveNS.info.playbackBytesPerSecond/1000).toFixed(2);
					statSRTT.text = _receiveNS.info.SRTT.toString();
					
					statVideoBuffLen.text = _receiveNS.info.videoBufferLength.toString();
					statVideoBytesSec.text = (_receiveNS.info.videoBytesPerSecond/1000).toFixed(2);
					statVideoLossRate.text = _receiveNS.info.videoLossRate.toString();
					statAudioBuffLen.text = _receiveNS.info.audioBufferLength.toString();
					statAudioBytesSec.text = (_receiveNS.info.audioBytesPerSecond/1000).toFixed(2);
					statAudioLossRate.text = _receiveNS.info.audioLossRate.toString();
				}
			}
			
			// Called when buffer size value change
			private function onBufferSize():void {
				if (_receiveNS) {
					_receiveNS.bufferTime = bufferSize.value / 1000;
					_receiveNS.bufferTimeMax = maxBufferSize.value / 1000;
				}
			}
		]]>
	</fx:Script>
	
	<mx:VBox id="containerVideo" width="800" height="600">
		<mx:UIComponent id="videoUI" width="100%" height="100%"/>
		<mx:VBox id="containerTools" width="100%" verticalGap="0">
			<mx:HBox width="100%" id="config" alpha="0.8" visible="true">
				<mx:TabNavigator  width="100%" creationPolicy="all" alpha="0.8" historyManagementEnabled="false">
					<mx:VBox label="Parameters" alpha="0.8">
						<mx:HBox width="100%">
							<mx:Label text="Url : "/>
							<mx:TextInput id="address" width="100%" text="rtmfp://127.0.0.1/test123"/>
							<mx:Button label="Connect" click="onConnect()"/>
						</mx:HBox>
						<mx:HBox width="100%">
							<mx:Label text="NetGroup name* : " toolTip="*No NetGroup if empty (group name used to find group specifier id)" />
							<mx:TextInput width="100%" id="group" text=""/>
							<mx:Label text="NetGroup id* : " toolTip="*No NetGroup if empty (direct group specifier id)" />
							<mx:TextInput width="100%" id="groupspecifier" text=""/>
							<mx:Label text="Buffer : "/>
							<mx:NumericStepper id="bufferSize" minimum="0" maximum="5000" value="0" change="onBufferSize()" />
							<mx:Label text="ms"/>
							<mx:Label text="Max Buffer : "/>
							<mx:NumericStepper id="maxBufferSize" minimum="0" maximum="5000" value="500" change="onBufferSize()" />
							<mx:Label text="ms"/>
						</mx:HBox>
						<mx:HBox width="100%">
							<mx:Label text="Messages : "/>
							<mx:TextInput width="100%" id="messages" editable="false"/>
						</mx:HBox>
					</mx:VBox>
					<mx:VBox label="Logs" alpha="0.8">
						<s:TextArea width="100%" height="100%" id="consoleRTMP" editable="false"/>
					</mx:VBox>
					<mx:VBox label="Statistics" alpha="0.8">
						<mx:HBox width="100%">
							<mx:Button id="btStatistics" label="Start" click="toggleStats()"/>
							<mx:Label text="Buffer Length : "/>
							<mx:Label id="statBuffLength" text=""/>
							<mx:Label text="Bytes Loaded : "/>
							<mx:Label id="statBytesLoaded" text=""/>
							<mx:Label text="Current FPS : "/>
							<mx:Label id="statCurrentFPS" text=""/>
							<mx:Label text="Live Delay : "/>
							<mx:Label id="statLiveDelay" text=""/>
							<mx:Label text="Time : "/>
							<mx:Label id="statTime" text=""/>
						</mx:HBox>
						<mx:HBox width="100%">
							<mx:Label text="Byte Count : "/>
							<mx:Label id="statByteCount" text=""/>
							<mx:Label text="Dropped Frames : "/>
							<mx:Label id="statDroppedFrames" text=""/>
							<mx:Label text="Max KBps : "/>
							<mx:Label id="statMaxBytesSec" text=""/>
							<mx:Label text="Playback KBps : "/>
							<mx:Label id="statPlaybackBytesSec" text=""/>
							<mx:Label text="SRTT : "/>
							<mx:Label id="statSRTT" text=""/>
						</mx:HBox>
						<mx:HBox width="100%">
							<mx:Label text="Video Buffer Length : "/>
							<mx:Label id="statVideoBuffLen" text=""/>
							<mx:Label text="Video KBps : "/>
							<mx:Label id="statVideoBytesSec" text=""/>
							<mx:Label text="Video Loss Rate : "/>
							<mx:Label id="statVideoLossRate" text=""/>
							<mx:Label text="Audio Buffer Length : "/>
							<mx:Label id="statAudioBuffLen" text=""/>
							<mx:Label text="Audio KBps : "/>
							<mx:Label id="statAudioBytesSec" text=""/>
							<mx:Label text="Audio Loss Rate : "/>
							<mx:Label id="statAudioLossRate" text=""/>
						</mx:HBox>
					</mx:VBox>
				</mx:TabNavigator>
			</mx:HBox>
			<mx:HBox id="tools" width="100%" visible="true">
				<mx:Image id="btPause" source="@Embed('gtk-medias-mettre-en-pause-icone-4285-32.png')" click="pause()" />
				<mx:Spacer id="spacerTools" width="100%"/>
				<mx:Image id="btParameters" source="@Embed('parameters-icone-6400-32.png')" click="onParameters()" />
				<mx:Image id="btFullScreen" source="@Embed('full-screen-window-icone-4401-32.png')" click="onFullScreen()" />
			</mx:HBox>
		</mx:VBox>
	</mx:VBox>
</s:Application>
