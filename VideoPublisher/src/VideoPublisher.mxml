<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="800" minHeight="600" applicationComplete="init()">
				
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		mx|Panel {
			backgroundColor: #869ca7;
		}
		
	</fx:Style>
				
	<fx:Script>
		<![CDATA[
			/*
			 * Usage : http://<host>/VideoPublisher/[?options]
			 * 
			 * Options are :
			 * 
			 * - url=<url>              Set the url to connect to (automatic connection)
			 * - bandwith=<value>		Bandwith rate in Kbps
			 * - quality=<percentage>	Quality of the video in percent (0 means that bandwith parameter is used to determine the quality)
			 * 
			 * Example : http://127.0.0.1/VideoPlayer/?url=rtmfp://127.0.0.1/app/test123 will connect automatically to "app" on localhost and publish "test123"
			 */
		
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.utils.URLUtil;
			import flash.media.H264VideoStreamSettings;
			
			private var _publishName:String;
			private var _urlPath:String;
			
			private var _mic:Microphone;
			private var _cam:Camera;
			private var _dump:Boolean = false;
			
			private var _connection:NetConnection;			
			private var _connection2:NetConnection; // Connection with NetGroup
			private var _outstream:NetStream;
			private var _netGroup:NetGroup;
			
			private var _videoCodec:H264VideoStreamSettings;
			
			[Bindable] private var listCam:ArrayList = new ArrayList();
			[Bindable] private var listVideoCodec:ArrayList = new ArrayList(["H264 Baseline","H264 Main","Sorenson"]);
			[Bindable] private var listAudioCodec:ArrayList = new ArrayList(["NellyMoser","Speex","Off"]);
			[Bindable] private var listEchoCancellation:ArrayList = new ArrayList(["Normal","Headphones","Usb Device", "Off","Basic Micro"]);
			[Bindable] private var listResolution:ArrayList = new ArrayList(["160x120","320x240","480x360","640x480","1280x960", "320x180","480x270","640x360","1280x720"]);
			
			// init camera
			private function init():void {
				// Init microphone
				comboAudioCodec.selectedIndex = 1;
				onEchoChanged();
				onSilenceChange();
				onNoiseChange();
				
				// Init camera parameters and select the first one
				for (var index:String in Camera.names) {
					listCam.addItem(Camera.names[index]);
				}
				listCam.addItem("Off");
				
				comboCam.selectedIndex = 0;
				comboVideoCodec.selectedIndex = 0;
				
				// Generate dynamic url
				var url:String = this.loaderInfo.url;
				var domainNPath:Array = url.match(/(:\/\/.+)\//);
				if (URLUtil.getProtocol(url) != "file")
					address.text = "rtmfp" + domainNPath[1] + "/test123";
					
				// Manage parameters
				if (loaderInfo.parameters) {
					
					if (loaderInfo.parameters.quality)
						quality.value = loaderInfo.parameters.quality;
					if (loaderInfo.parameters.bandwith)
						bandwith.value = loaderInfo.parameters.bandwith;
					
					// Finally, automatically connect to the url in parameter
					// url : host + path of the stream
					if (loaderInfo.parameters.url) {				
						address.text = loaderInfo.parameters.url;
						connect();
					}
				}
				
				onCamChange();
				
				// Select the first video codec & set video quality
				onVideoCodec();
			}
			
			// net status handler for the NetConnection : connect the netstream and publish
			private function onStatus(evt:NetStatusEvent):void { 
				
				console.text +=  "NetConnection event : " + evt.info.code + "\n";
				
				switch(evt.info.code) {
					case "NetConnection.Connect.Success":
					
						if (_dump) // First activate publication dump if requested
							NetConnection(evt.target).call("dumpON", null);
						
						// Classic publishing
						if (evt.target==_connection) {
							_outstream = new NetStream(_connection);
							_outstream.addEventListener(NetStatusEvent.NET_STATUS, onStatusOutstream);
							_outstream.attachCamera(_cam);
							_outstream.attachAudio(_mic);
							_outstream.videoStreamSettings = _videoCodec;
							_outstream.publish(_publishName);
							onReliable(); // set reliability
						} else { // NetGroup publishing
							
							var groupSpec:GroupSpecifier = new GroupSpecifier(group.text);
							groupSpec.peerToPeerDisabled = false; 
							groupSpec.serverChannelEnabled=true; 
							groupSpec.ipMulticastMemberUpdatesEnabled=true; 
							groupSpec.multicastEnabled=true; 
							groupSpec.postingEnabled=true;
							var groupId:String = groupSpec.groupspecWithAuthorizations(); 
							
							console.text += "GroupSpec created : " + groupId + "\n";
							_outstream = new NetStream(_connection2, groupId);
							_outstream.addEventListener(NetStatusEvent.NET_STATUS, onStatusOutstream);
							_outstream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onStatusOutstream);
							onReliable(); // set reliability
							
							_netGroup = new NetGroup(_connection2,groupId); 
							_netGroup.addEventListener(NetStatusEvent.NET_STATUS, function(evt:NetStatusEvent):void {
								console.text +=  "NetGroup event : " + evt.info.code + "\n"; 
							});
						}
						break;
					case "NetStream.Connect.Success":
						if (evt.target==_connection2) {
							_outstream.attachCamera(_cam);
							_outstream.attachAudio(_mic);
							_outstream.videoStreamSettings = _videoCodec;
							_outstream.publish(_publishName);
						}
						break;
					case "NetConnection.Connect.Closed":
						btPublish.label = "Publish";
						cbDump.enabled = true;
						break;
				}
			}
			
			// net status handler for the NetStream
			private function onStatusOutstream(evt:Event):void {
				if (evt is AsyncErrorEvent)
					console.text +=  "NetSream error : " + AsyncErrorEvent(evt).text + "\n"; 
				else
					console.text +=  "NetStream event : " + NetStatusEvent(evt).info.code + "\n";
			}
			
			// Connect, then publish (or disconnect)
			private function connect():void {
				
				if (_connection) {
					_connection.close();
					_connection = null;
				}else if (_connection2) {
					_connection2.close();
					_connection2 = _connection;
				} else {
				
					var lastSlash:int = address.text.lastIndexOf("/");
					_urlPath=address.text.substr(0,lastSlash);
					_publishName=address.text.substr(lastSlash+1);
					if (_publishName == "" || _publishName == "VideoPublisher") {
						Alert.show("Please type a publish name");
						return;
					}
	
					if (group.text == "") { // Classic publish
						_connection = new NetConnection();
						_connection.connect(_urlPath);
						_connection.addEventListener(NetStatusEvent.NET_STATUS, onStatus);
					} else { // Publish to NetGroup
						_connection2 = new NetConnection();
						_connection2.connect(_urlPath);
						_connection2.addEventListener(NetStatusEvent.NET_STATUS, onStatus);
					}
					btPublish.label = "Unpublish";
					cbDump.enabled = false;
				}
			}
			
			// Send a message to all
			private function write():void {
				
				// Classic publisher
				_outstream.send("message2All", message.text);
				message.text = "";
			}
			
			// Activate/Disactivate echo
			private function onDumpChange():void {
				_dump = cbDump.selected;
			}
			
			// Change the codec used for video compression
			private function onVideoCodec():void {
				switch(comboVideoCodec.selectedLabel) {
					case "Sorenson":
						_videoCodec = null;
						break;
					case "H264 Baseline":
						_videoCodec = new H264VideoStreamSettings();
						_videoCodec.setProfileLevel(H264Profile.BASELINE, "3");
						break;
					case "H264 Main":
						_videoCodec = new H264VideoStreamSettings();
						_videoCodec.setProfileLevel(H264Profile.MAIN, "3");
						break;						
				}
			}
			
			// Change sound detection level
			private function onSilenceChange():void {
				if (_mic)
					_mic.setSilenceLevel(silenceLevel.value);
			}
			
			// Change noise suppression
			private function onNoiseChange():void {
				if (_mic)
					_mic.noiseSuppressionLevel = -noiseSuppression.value;
			}
			
			// Change the microphone properties
			private function onEchoChanged():void {
				if (comboAudioCodec.selectedLabel == "Off") {
					_mic = null;
				} else {
					
					_mic = Microphone.getMicrophone();// default microphone
					if (echoCancellation.selectedItem=="Basic Micro") {
						_mic.setUseEchoSuppression(cbEchoSuppression.selected);
						console.text += "Basic micro : "+_mic+"\n";
					} else if (Microphone.getEnhancedMicrophone()) {
						var options:MicrophoneEnhancedOptions = new MicrophoneEnhancedOptions();
						_mic = Microphone.getEnhancedMicrophone();
						switch(echoCancellation.selectedItem){
							case "Normal":
								options.mode = MicrophoneEnhancedMode.FULL_DUPLEX;
								break;
							case "Headphones":
								options.mode = MicrophoneEnhancedMode.HEADSET;
								break;
							case "Usb Device":
								options.mode = MicrophoneEnhancedMode.HALF_DUPLEX;
								break;
							case "Off":
								options.mode = MicrophoneEnhancedMode.OFF;
								break;
						}
						options.echoPath = (cbEchoPath.selected)? 256 : 128;
						_mic.enhancedOptions = options;
					} else
						console.text += "Enhanced Microphone options are not available with your Microphone\n";
					if (!_mic) {
						console.text += "No Microphone founded\n";
						return;
					}
					_mic.codec = comboAudioCodec.selectedLabel;
				}
				if(_outstream)
					_outstream.attachAudio(_mic);
					
				if (_mic)
					if (_mic.enhancedOptions)
						console.text += "Audio parameters changed (codec : " + _mic.codec + ", mode : " +_mic.enhancedOptions.mode + ", echoPath : " + _mic.enhancedOptions.echoPath + ")\n";
					else
						console.text += "Audio parameters changed (codec : " + _mic.codec + ", echo suppression : " + _mic.useEchoSuppression + ")\n";
			}
			
			// Change the camera used by player
			private function onCamChange():void {
				 var selection:String = String(comboCam.selectedIndex);
				 if (selection == "Off")
					_cam = null;
				else
					_cam = Camera.getCamera(selection);
				 player.attachCamera(_cam);
				if (_outstream)
					_outstream.attachCamera(_cam);
				 
				 // Update video quality
				 onResolutionChange();
				 onQuality();
				 onKeyframes();
			}
			
			// Change the resolution of the video
			private function onResolutionChange():void {
				if (!_cam) return;
				
				var resolution:Array = comboResolution.selectedLabel.split("x");
				var w:int = resolution[0];
				var h:int = resolution[1];
				_cam.setMode(w, h, fps.value);
			}
			
			// Change the quality of the video
			private function onQuality():void {
				if (!_cam) return;
				
				_cam.setQuality(bandwith.value*125,quality.value);
				console.text += "Video parameters changed (bandwith : " + bandwith.value + " Kbps, quality : " + quality.value + "%)\n";
			}
			
			// Change the video frames rate
			private function onKeyframes():void {
				if (!_cam) return;
				
				_cam.setKeyFrameInterval(keyframes.value);
			}
			
			// Change audio/video reliability
			private function onReliable():void {
				if (_outstream) {
					_outstream.videoReliable = cbVideoReliable.selected;
					_outstream.audioReliable = cbAudioReliable.selected;
				}
			}
		]]>
	</fx:Script>
	<mx:VBox width="800" height="600" horizontalAlign="center">
		<mx:HBox>
			<mx:VBox width="430">
				<mx:HBox width="100%">
					<mx:Label text="Publisher" fontWeight="bold"/>
					<mx:HRule width="100%" visible="false"/>
					<s:CheckBox selected="false" label="Dump*" change="onDumpChange()" id="cbDump" toolTip="Doesn't work with NetGroups" />
				</mx:HBox>
				<mx:HBox width="100%">
					<mx:Label text="Address"/>
					<mx:TextInput width="100%" text="rtmfp://localhost/test123" id="address"/>
				</mx:HBox>
				<mx:HBox width="100%">
					<mx:Label text="NetGroup*" toolTip="No NetGroup if empty" />
					<mx:TextInput width="100%" text="" id="group"/>
					<mx:Button label="Publish" click="connect()" id="btPublish"/>
				</mx:HBox>
				<mx:HBox width="100%">
					<mx:Label text="Message"/>
					<mx:TextInput width="100%" id="message"/>
					<mx:Button label="Send" click="write()"/>
				</mx:HBox>
				
				<mx:Panel title="Video" width="100%">
					<mx:HBox width="100%">
						<mx:Label text="Camera"/>
						<mx:ComboBox id="comboCam" dataProvider="{listCam}" change="onCamChange()" editable="false"/>
						<s:NumericStepper id="fps" minimum="1" maximum="60" change="onCamChange()" value="15" />
						<mx:Label text="Fps"/>
					</mx:HBox>
					<mx:HBox>
						<mx:Label text="Quality"/>
						<s:NumericStepper id="quality" minimum="0" maximum="100" change="onQuality()" toolTip="0 means variable"/>
						<mx:Label text="%"/>
						<mx:ComboBox id="comboResolution" dataProvider="{listResolution}" change="onResolutionChange()" selectedItem="640x480" editable="false"/>
						<s:NumericStepper id="bandwith" minimum="0" maximum="20480" stepSize="1" change="onQuality()" value="128" toolTip="0 means variable (it's Kilobits, not Kilobytes!)"/>
						<mx:Label text="Kbps"/>
					</mx:HBox>
					<mx:HBox width="100%">						
						<mx:Label text="Codec"/>
						<mx:ComboBox id="comboVideoCodec" dataProvider="{listVideoCodec}" change="onVideoCodec()" editable="false"/>
						<mx:Label text="Keyframes"/>
						<s:NumericStepper id="keyframes" minimum="1" maximum="48" change="onKeyframes()" value="15"/>
						<s:CheckBox selected="true" label="Reliable" change="onReliable()" id="cbVideoReliable"/>
					</mx:HBox>
				</mx:Panel>
				
				<mx:Panel title="Audio" width="100%">
					<mx:HBox width="100%">
						<mx:Label text="Codec"/>
						<mx:ComboBox id="comboAudioCodec" dataProvider="{listAudioCodec}" change="onEchoChanged()" editable="false"/>
						<mx:Label text="Echo Cancellation"/>
						<mx:ComboBox id="echoCancellation" dataProvider="{listEchoCancellation}" change="onEchoChanged();"/>
					</mx:HBox>
					<mx:HBox width="100%">
						<mx:Label text="Silence level*" toolTip="Sets the minimum input level that should be considered sound" />
						<s:NumericStepper id="silenceLevel" minimum="0" maximum="100" change="onSilenceChange()" value="10"/>
						<mx:Label text="Noise Suppression*" toolTip="Only applied to Speex compression" />
						<s:NumericStepper id="noiseSuppression" minimum="0" maximum="100" change="onNoiseChange()" value="30"/>
						<s:CheckBox selected="true" label="Reliable" change="onReliable()" id="cbAudioReliable"/>
					</mx:HBox>
					<mx:HBox width="100%">
						<s:CheckBox selected="false" label="EchoPath 256ms*" change="onEchoChanged()" id="cbEchoPath" toolTip="enhanced option, change echo path length (default is 128ms)" />
						<s:CheckBox selected="false" label="Echo Suppression*" change="onEchoChanged()" id="cbEchoSuppression" toolTip="works only with Basic Microphone" />
					</mx:HBox>
				</mx:Panel>
			</mx:VBox>
			<mx:VideoDisplay width="360" height="280" id="player"/>
		</mx:HBox>
		<s:TextArea height="100%" width="100%" id="console" editable="false"/>
	</mx:VBox>
</mx:Application>
